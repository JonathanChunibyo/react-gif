{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategory","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","onClick","getGif","category","a","url","encodeURI","fetch","resp","json","data","gif","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","setTimeout","useFetchGif","AppGif","categorias","Math","random","ReactDOM","require","divRoot","document","querySelector","render"],"mappings":"mLAIaA,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAI1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OAEI,uBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAY,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,MAKlB,UAEI,mCAAMD,KACN,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SAlBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,QAkBfG,QAvBE,WACVX,EAAc,W,8BCLRY,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAMD,EAAKE,KAAI,SAAAC,GACjB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAYZM,GAZY,4CAAH,sDCCPO,EAAe,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACjC,OACI,sBAAKc,UAAU,6CAAf,UACI,4BAAIJ,IACJ,qBAAKK,IAAMf,EAAKgB,IAAKN,QCApBO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECLuB,SAACA,GAExB,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WAENxB,EAAOC,GACNwB,MAAM,SAAAd,GACJe,YAAW,WACVH,EAAS,CACLf,KAAMG,EACNU,SAAS,MAEX,UAEP,CAACpB,IAEGqB,EDfyBK,CAAY1B,GAA/Ba,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAWrB,OACI,qCAEI,qBAAIJ,UAAU,wCAAd,cAAwDhB,EAAxD,OACCoB,GAAW,mBAAGJ,UAAU,oCAAb,2BAEZ,qBAAKA,UAAU,WAAf,SAKQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aECtBgB,EA7BC,WAGZ,MAAkC1C,mBAAS,CAAC,UAA5C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAKA,OACI,qCACI,gDACA,cAAE,EAAF,CAAcA,YAAcA,IAC5B,uBAEA,6BAEQ4C,EAAWnB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEAA,SAAWA,GADLA,EAAS6B,KAAKC,mBCpBtCC,G,MAAWC,EAAQ,KACnBC,EAAUC,SAASC,cAAc,SAEvCJ,EAASK,OAAQ,cAAE,EAAF,IAAaH,K","file":"static/js/main.27ef1275.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from \"prop-types\";\n\n\nexport const AddCategory = ({ setcategory }) => {\n    const vacio = () => {\n        setinputValue('');\n    }\n    const [inputValue, setinputValue] = useState('');\n    const handleInputvalue = (e) => {\n        setinputValue(e.target.value);\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setcategory(cats => [inputValue, ...cats]);\n            setinputValue('');\n        }\n    }\n    return (\n\n        <form onSubmit={handleSubmit}>\n\n            <h1> {inputValue}</h1>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputvalue}\n                onClick={vacio}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setcategory: PropTypes.func.isRequired ,\n}\n\n","\n export const getGif = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&api_key=Y3h0vjouDCSgUbSpWHPtoDPT3R9PEjlk&limit=10`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gif = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url,\n        }\n    });\n    return gif;\n}\n","import React from 'react'\n\nexport const GiftGridItem = ({title, url}) => {\n    return (\n        <div className='card animate__animated animate__fadeInLeft'>\n            <p>{title}</p>\n            <img src= {url} alt={title}/>\n        </div>\n    )\n}\n","import React /* { useEffect, useState } */ from 'react'\nimport { useFetchGif } from '../hooks/useFetchGif'\n//import { getGif } from '../helpers/getGifs';\nimport { GiftGridItem } from './GiftGridItem';\n\n\nexport const GifGrid = ({ category }) => {\n\n\n    const {data: images, loading} = useFetchGif(category);\n\n\n    \n    \n    /* const [images, setimages] = useState([]);\n    useEffect(() => {\n        getGif(category).then( setimages );\n    }, [category]);\n */\n\n    return (\n        <>\n\n            <h3 className='animate__animated animate__zoomInDown'> {category} </h3>\n            {loading && <p className='animate__animated animate__shakeX'>'Cargando...'</p>}\n            \n            <div className='cardgrid'>\n                {\n                     //images.map(img => (\n                       // <li key={img.id}>{img.title}</li>\n                    //)) \n                    images.map((img) =>\n                        <GiftGridItem\n                            key={img.id}\n                            {...img}\n                        />)\n                }\n            </div>\n        </>\n    )\n}\n","\nimport React, { useEffect, useState } from 'react'\nimport { getGif } from '../helpers/getGifs';\n\nexport const useFetchGif = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true,\n    })\n\n    useEffect(() => {\n\n        getGif(category)\n        .then( img => {\n           setTimeout(() => {\n            setstate({\n                data: img,\n                loading: false\n            })\n           }, 3000);\n        })\n    }, [category]);\n\n    return state;\n}\n","//import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport  {GifGrid}  from './components/GifGrid';\n\nconst AppGif = (() => {\n\n    //const categorias = ['anime', 'Toons', 'series', 'Novela']\n    const [categorias, setcategory] = useState(['anime']);\n /*    const handleAdd = () => {\n        setcategory(['HunterXHunter', ...categorias]);\n    } */\n\n    return (\n        <>\n            <h2>Git Expert App</h2>\n            < AddCategory setcategory= {setcategory} />\n            <hr />\n\n            <ol>\n                {\n                    categorias.map((category) => (\n                        <GifGrid \n                        key= {category+Math.random()} \n                        category= {category}\n                        />\n                    ))\n                }\n            </ol>\n            {/* <button onClick={handleAdd}> AÃ±adir </button> */}\n        </>\n    );\n});\n\nexport default AppGif;","import AppGif from './GifExpertApp';\nimport './index.css';\n\nconst ReactDOM = require('react-dom');\nconst divRoot = document.querySelector('#root');\n\nReactDOM.render( < AppGif />, divRoot);\n\n"],"sourceRoot":""}